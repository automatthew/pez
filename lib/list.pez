# A trivial implementation of linked lists.

0 constant nil
: car ( list -- head )  @ ;
: cdr ( list -- tail )  cell-size + @ ;
: cons ( list item -- new-list )
	2 cells malloc swap over ! ( list new-list )
	swap over cell-size + ! ;
: empty? ( list -- t|f )  0= ;

: ca/dr ( list -- cdr car )
	dup cdr swap car ;
: cd/ar ( list -- car cdr )
	dup car swap cdr ;

variable list-each-word'
# Executes the given item for each car of the list.
: list-each ( list word -- )
	list-each-word' !
	begin dup empty? not while
		cd/ar >r list-each-word' @ execute r>
	repeat drop ;

: list-reduce ( list word -- reduction )
	swap cd/ar rot list-each ;
# Hilariously, if you want to supply an initial value instead of using the head
# of the list, this word is equivalent to list-each.
